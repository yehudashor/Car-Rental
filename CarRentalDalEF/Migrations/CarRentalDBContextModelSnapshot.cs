// <auto-generated />
using System;
using CarRentalDalEF.CarRentalDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalDalEF.Migrations
{
    [DbContext(typeof(CarRentalDBContext.CarRentalDBContext))]
    partial class CarRentalDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRentalDalCore.DataObjects.BranchOperations.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.BranchOperations.BranchLocation", b =>
                {
                    b.Property<int>("BranchLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchLocationId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("BranchLocationId");

                    b.HasIndex("BranchId")
                        .IsUnique();

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("BranchesLocations");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.BranchOperations.BranchOpeningHours", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("BranchId", "DayOfWeek");

                    b.ToTable("BranchesOpeningHours");

                    b.HasData(
                        new
                        {
                            BranchOpeningHoursId = 5,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.BranchOperations.BranchOpeningHoursEvent", b =>
                {
                    b.Property<int>("BranchOpeningHoursEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchOpeningHoursEventId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("EndDay")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OpenClose")
                        .HasColumnType("int");

                    b.Property<int>("StartDay")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("BranchOpeningHoursEventId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchOpeningHoursEvents");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("CarColorId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("DayPrice")
                        .HasColumnType("float");

                    b.Property<int>("Gearbox")
                        .HasColumnType("int");

                    b.Property<int>("KilometersNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastTestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PublishYear")
                        .HasColumnType("int");

                    b.Property<int>("SeatsNumber")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("CarColorId");

                    b.HasIndex("CarTypeId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.CarColor", b =>
                {
                    b.Property<string>("CarColorId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CarColorId");

                    b.ToTable("CarColors");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.CarImage", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CarImageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CarId", "CarImageId");

                    b.ToTable("CarImages");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.CarRental", b =>
                {
                    b.Property<int>("CarRentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarRentalId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CollectionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentlyInRented")
                        .HasColumnType("int");

                    b.Property<int>("CustomerDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerPaymentId")
                        .HasColumnType("int");

                    b.Property<double>("DayPrice")
                        .HasColumnType("float");

                    b.Property<int>("DriverAge")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CarRentalId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerDetailsId");

                    b.HasIndex("CustomerPaymentId")
                        .IsUnique();

                    b.ToTable("CarRentals");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.CarType", b =>
                {
                    b.Property<int>("CarTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarTypeId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CarTypeId");

                    b.ToTable("CarType");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Customer.CreditCard", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditCardId"));

                    b.Property<int>("CVV")
                        .HasColumnType("int");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime2");

                    b.HasKey("CreditCardId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Customer.CreditCardPayment", b =>
                {
                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerPaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreditCardId", "CustomerPaymentId");

                    b.HasIndex("CustomerPaymentId");

                    b.ToTable("CreditCardPayment");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Customer.CustomerDetails", b =>
                {
                    b.Property<int>("CustomerDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerDetailsId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrivingLicenseImage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("CustomerDetailsId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("CustomerDetails");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Customer.CustomerPayment", b =>
                {
                    b.Property<int>("CustomerPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerPaymentId"));

                    b.HasKey("CustomerPaymentId");

                    b.ToTable("CustomerPayments");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Locations.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlaceNumber")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.BranchOperations.BranchLocation", b =>
                {
                    b.HasOne("CarRentalDalCore.DataObjects.BranchOperations.Branch", "Branch")
                        .WithOne("BranchLocation")
                        .HasForeignKey("CarRentalDalCore.DataObjects.BranchOperations.BranchLocation", "BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalDalCore.DataObjects.Locations.Location", "Location")
                        .WithOne()
                        .HasForeignKey("CarRentalDalCore.DataObjects.BranchOperations.BranchLocation", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.BranchOperations.BranchOpeningHours", b =>
                {
                    b.HasOne("CarRentalDalCore.DataObjects.BranchOperations.Branch", "Branch")
                        .WithMany("OpeningHoursList")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.BranchOperations.BranchOpeningHoursEvent", b =>
                {
                    b.HasOne("CarRentalDalCore.DataObjects.BranchOperations.Branch", "Branch")
                        .WithMany("BranchOpeningHoursEvents")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.Car", b =>
                {
                    b.HasOne("CarRentalDalCore.DataObjects.CarOperations.CarColor", "CarColor")
                        .WithMany("Cars")
                        .HasForeignKey("CarColorId");

                    b.HasOne("CarRentalDalCore.DataObjects.CarOperations.CarType", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarColor");

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.CarImage", b =>
                {
                    b.HasOne("CarRentalDalCore.DataObjects.CarOperations.Car", "Car")
                        .WithMany("Images")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.CarRental", b =>
                {
                    b.HasOne("CarRentalDalCore.DataObjects.BranchOperations.Branch", "Branch")
                        .WithMany("CarRentals")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarRentalDalCore.DataObjects.CarOperations.Car", "Car")
                        .WithMany("CarRentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarRentalDalCore.DataObjects.Customer.CustomerDetails", "CustomerDetails")
                        .WithMany("CarRentals")
                        .HasForeignKey("CustomerDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarRentalDalCore.DataObjects.Customer.CustomerPayment", "CustomerPayment")
                        .WithOne("CarRental")
                        .HasForeignKey("CarRentalDalCore.DataObjects.CarOperations.CarRental", "CustomerPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Car");

                    b.Navigation("CustomerDetails");

                    b.Navigation("CustomerPayment");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Customer.CreditCardPayment", b =>
                {
                    b.HasOne("CarRentalDalCore.DataObjects.Customer.CreditCard", "CreditCard")
                        .WithMany("CreditCardPayments")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarRentalDalCore.DataObjects.Customer.CustomerPayment", "CustomerPayment")
                        .WithMany("CreditCardPayments")
                        .HasForeignKey("CustomerPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("CustomerPayment");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Customer.CustomerDetails", b =>
                {
                    b.HasOne("CarRentalDalCore.DataObjects.Locations.Location", "Location")
                        .WithOne()
                        .HasForeignKey("CarRentalDalCore.DataObjects.Customer.CustomerDetails", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.BranchOperations.Branch", b =>
                {
                    b.Navigation("BranchLocation");

                    b.Navigation("BranchOpeningHoursEvents");

                    b.Navigation("CarRentals");

                    b.Navigation("OpeningHoursList");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.Car", b =>
                {
                    b.Navigation("CarRentals");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.CarColor", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.CarOperations.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Customer.CreditCard", b =>
                {
                    b.Navigation("CreditCardPayments");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Customer.CustomerDetails", b =>
                {
                    b.Navigation("CarRentals");
                });

            modelBuilder.Entity("CarRentalDalCore.DataObjects.Customer.CustomerPayment", b =>
                {
                    b.Navigation("CarRental");

                    b.Navigation("CreditCardPayments");
                });
#pragma warning restore 612, 618
        }
    }
}
